name: CI Build, test and cover

on:
  workflow_call:
    inputs:
      dotnet_version:
        required: true
        type: string
      src_projects:
        required: false
        type: string
        default: './src/**/*.csproj'
      test_projects:
        required: false
        type: string
      report_results:
        required: false
        type: boolean
        default: true
      cache_reports:
        required: false
        type: boolean
        default: true
      reports_path:
        required: false
        type: string
        default: './test-reports'
      fail_below_coverage:
        required: false
        type: boolean
        default: true
      file_name:
        required: false
        type: string
        default: 'TestArtifacts'
      enable_win_target:
        description: Sets 'EnableWindowsTargeting' during the dotnet build process
        required: false
        type: boolean
        default: false
      dotnet_workloads:
        description: A space-separated list of workloads to be installed
        required: false
        type: string
        default: ''
    secrets:
      READ_PACKAGES_USERNAME:
        required: false
      READ_PACKAGES_TOKEN:
        required: false
    outputs:
      cache_key:
        description: "The key of the cache storing the reports"
        value: ${{ jobs.build_test_cover.outputs.cache_key }}

jobs:
  build_test_cover:
    runs-on: ubuntu-latest
    name: CI Build
    outputs:
      cache_key : ${{ steps.set_key.outputs.cache_key }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet and build solution
        uses: rosslight/reusable-actions/dotnet-build@main
        with:
          dotnet_version: ${{ inputs.dotnet_version }}
          build_projects: ${{ inputs.src_projects }}
          package_username: ${{ secrets.READ_PACKAGES_USERNAME }}
          package_password: ${{ secrets.READ_PACKAGES_TOKEN }}
          dotnet_workloads: ${{ inputs.dotnet_workloads }}
          enable_win_target: ${{ inputs.enable_win_target }}

      # Test all projects inside the ./test directory.
      # Coverage goes to ./results/uuid/...
      # Result logs go to ./results/test/PROJECT_NAME/
      - name: Test
        if: inputs.test_projects != ''
        run: |
          IFS=';' read -r -a patterns <<< "${{ inputs.test_projects }}"
          for pattern in "${patterns[@]}"; do
            for d in $pattern; do
              dotnet test "$d" --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./results --logger "trx;logfilename=${d%.*}.trx";
            done
          done

      - name: Move reports
        if: always() && inputs.test_projects != ''        # run this step even if previous step failed
        run: |
          mkdir ${{ inputs.reports_path }}
          mkdir './results/test'
          mv ./results/test/**/*.trx ${{ inputs.reports_path }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always() && inputs.test_projects != '' && inputs.report_results
        with:
          name: Tests
          path: ${{ inputs.reports_path }}/*.trx
          reporter: dotnet-trx
          fail-on-error: true

      - name: Combine Coverage Reports
        if: inputs.test_projects != ''
        run: |
          export PATH="$PATH:/root/.dotnet/tools"
          dotnet tool install --global dotnet-coverage
          dotnet coverage merge ./results/**/*.xml --output ${{ inputs.reports_path }}/coverage.xml --output-format cobertura

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: inputs.test_projects != '' && inputs.report_results
        with:
          filename: ${{ inputs.reports_path }}/coverage.xml
          badge: true
          fail_below_min:  ${{ inputs.fail_below_coverage }}
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'

        # Add the coverage to the PR
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: inputs.test_projects != '' && github.event_name == 'pull_request' && inputs.report_results
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Move everything in correct folder and zip
        if: inputs.test_projects != '' && inputs.cache_reports
        run: |
          mv code-coverage-results.md ${{ inputs.reports_path }}
          mkdir ${{ inputs.reports_path }}/${{ inputs.file_name }}
          cd ${{ inputs.reports_path }}
          shopt -s extglob # Enable extended pattern matching
          mv !(${{ inputs.file_name }}) ${{ inputs.file_name }}
          cd ${{ inputs.file_name }}
          zip -r ${{ inputs.file_name }}.zip .
          cd ..
          mv ${{ inputs.file_name }}/${{ inputs.file_name }}.zip .
          rm -r ${{ inputs.file_name }}

      - name: Set cache_key
        if: inputs.cache_reports
        id: set_key
        run: |
          echo "cache_key=build-reports-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache releases
        if: inputs.cache_reports
        uses: actions/cache/save@v4
        with:
          path: ${{ inputs.reports_path }}
          key: ${{ steps.set_key.outputs.cache_key }}
