name: Setup dotnet and build solution
description: Specific steps to build for Windows
inputs:
  dotnet_version:
    description: The dotnet version to be used
    required: true
  installer_project_path:
    required: true
  project_path:
    required: true
  release_version:
    required: true
  msix_platform:
    required: true
  sign_with_trusted_signing:
    required: false
    default: 'false'
  publish_path:
    required: false
    default: './publish-msix'
  file_name:
    required: false
    default: 'App'
  READ_PACKAGES_USERNAME:
    required: false
  READ_PACKAGES_TOKEN:
    required: false
  AZURE_TENANT_ID:
    required: false
  AZURE_CLIENT_ID:
    required: false
  AZURE_CLIENT_SECRET:
    required: false
  AZURE_ENDPOINT:
    required: false
  AZURE_TRUSTED_SIGNING_ACCOUNT_NAME:
    required: false
  AZURE_CERTIFICATE_PROFILE_NAME:
    required: false
outputs:
  cache_key:
    description: "The key of the cache storing the msix"
    value: ${{ steps.set_key.outputs.cache_key }}

runs:
  using: "composite"
  steps:
    - name: Replace project version in Package.appxmanifest
      run: |
        $projectBaseDirectory = Split-Path ${{ inputs.installer_project_path }}
        $manifestPath = "$projectBaseDirectory/Package.appxmanifest"
        echo "Updating version of manifest $manifestPath to ${{ inputs.release_version }}"
        (Get-Content $manifestPath) -replace ' Version="([0-9]+\.[0-9]+\.[0-9]+)\.0"', " Version=`"${{ inputs.release_version }}.0`"" | Set-Content $manifestPath
      shell: pwsh

    - name: Setup dotnet and build solution
      uses: rosslight/reusable-actions/dotnet-build@main
      with:
        dotnet_version: ${{ inputs.dotnet_version }}
        build_projects: ${{ inputs.project_path }}
        package_username: ${{ inputs.READ_PACKAGES_USERNAME }}
        package_password: ${{ inputs.READ_PACKAGES_TOKEN }}
        enable_win_target: true
        dotnet_build_args: '/p:RuntimeIdentifiers=win-${{ inputs.msix_platform }} /p:Version=${{ inputs.release_version }}'

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: |
        msbuild ${{ inputs.installer_project_path}} `
            /p:Configuration=Release `
            /p:Platform=${{ inputs.msix_platform }} `
            /p:UapAppxPackageBuildMode=SideloadOnly `
            /p:AppxBundle=Never `
            /p:GenerateAppxPackageOnBuild=true `
            /p:AppxPackageSigningEnabled=false `
            /p:Version=${{ inputs.release_version }}
      shell: pwsh

    - name: Move and rename
      run: |
        $projectBaseDirectory = Split-Path ${{ inputs.installer_project_path }}
        mkdir ${{ inputs.publish_path }}
        echo "Starting to copy files from $projectBaseDirectory\AppPackages"
        dir $projectBaseDirectory\AppPackages
        Get-ChildItem -Path $projectBaseDirectory\AppPackages -Recurse -Filter *.msix* | ForEach-Object {
          echo "Found $($_.FullName)"
          mv $_.FullName ${{ inputs.publish_path }}
        }
        dir ${{ inputs.publish_path }}
        $file = Get-Item "${{ inputs.publish_path }}\*.Installer_*.msix"
        if ($file.FullName -eq $null) {
          throw "No file found"
        }
        Rename-Item -Path $file.FullName -NewName "${{ inputs.file_name }}.msix"
        dir ${{ inputs.publish_path }}
      shell: pwsh

    - name: Sign files with Trusted Signing
      uses: azure/trusted-signing-action@v0.4.0
      if: inputs.sign_with_trusted_signing
      with:
        azure-tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        azure-client-id: ${{ inputs.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ inputs.AZURE_CLIENT_SECRET }}
        endpoint: ${{ inputs.AZURE_ENDPOINT }}
        trusted-signing-account-name: ${{ inputs.AZURE_TRUSTED_SIGNING_ACCOUNT_NAME }}
        certificate-profile-name: ${{ inputs.AZURE_CERTIFICATE_PROFILE_NAME }}
        files-folder: ${{ inputs.publish_path }}

    - name: Set cache_key
      id: set_key
      run: |
        echo "cache_key=publish-msix-${{ github.sha }}" >> $Env:GITHUB_OUTPUT
      shell: pwsh

    - name: Cache releases
      uses: actions/cache/save@v4
      with:
        path: ${{ inputs.publish_path }}
        key: ${{ steps.set_key.outputs.cache_key }}
        enableCrossOsArchive: true